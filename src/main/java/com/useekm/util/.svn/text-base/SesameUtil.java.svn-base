/*
 * Copyright 2011 by TalkingTrends (Amsterdam, The Netherlands)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://opensahara.com/licenses/apache-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package com.useekm.util;

import info.aduna.iteration.CloseableIteration;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeConstants;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.Duration;
import javax.xml.datatype.XMLGregorianCalendar;

import org.openrdf.OpenRDFException;
import org.openrdf.model.Resource;
import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.RepositoryResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

//import com.useekm.spring.ExceptionConverter;

public class SesameUtil {
    private static final Logger LOG = LoggerFactory.getLogger(SesameUtil.class);
    private static final DatatypeFactory DATATYPE_FACTORY = newDatatypeFactory();

    public static void closeQuietly(RepositoryConnection rc) {
        if (rc != null) {
            try {
                rc.close();
            } catch (RepositoryException e) {
                SesameUtil.LOG.error("Could not close RepositoryConnection " + rc, e);
            }
        }
    }

    public static <T, E extends OpenRDFException> void closeQuietly(CloseableIteration<T, E> ci) {
        if (ci != null) {
            try {
                ci.close();
            } catch (OpenRDFException e) {
                SesameUtil.LOG.error("Could not close iteration " + ci, e);
            }
        }
    }

//    public static Value getUniqueObj(RepositoryConnection conn, Resource subj, URI pred) {
//        return SesameUtil.getUniqueObj(conn, subj, pred, true);
//    }

//    public static Value getUniqueObj(RepositoryConnection conn, final Resource subj, final URI pred, final boolean includeInferred) {
//        return ExceptionConverter.convert(new ExceptionConverter.AbstractFunction<Value, RepositoryConnection>(conn) {
//            @Override
//            public Value execute() throws OpenRDFException {
//                RepositoryResult<Statement> sts = conn().getStatements(subj, pred, null, includeInferred);
//                try {
//                    Value result = null;
//                    if (sts.hasNext())
//                        result = sts.next().getObject();
//                    if (sts.hasNext())
//                        result = null;
//                    return result;
//                } finally {
//                    sts.close();
//                }
//            }
//        });
//    }

//    public static Resource getUniqueSubj(RepositoryConnection conn, URI pred, Value obj) {
//        return SesameUtil.getUniqueSubj(conn, pred, obj, true);
//    }

//    public static Resource getFirstSubj(RepositoryConnection conn, URI pred, Value obj) {
//        return SesameUtil.getSubj(conn, pred, obj, true, false);
//    }
//
//    public static Resource getUniqueSubj(RepositoryConnection conn, final URI pred, final Value obj, final boolean includeInferred) {
//        return SesameUtil.getSubj(conn, pred, obj, includeInferred, true);
//    }

//    private static Resource getSubj(RepositoryConnection conn, final URI pred, final Value obj, final boolean includeInferred, final boolean unique) {
//        return ExceptionConverter.convert(new ExceptionConverter.AbstractFunction<Resource, RepositoryConnection>(conn) {
//            @Override
//            public Resource execute() throws OpenRDFException {
//                RepositoryResult<Statement> sts = conn().getStatements(null, pred, obj, includeInferred);
//                try {
//                    Resource result = null;
//                    if (sts.hasNext())
//                        result = sts.next().getSubject();
//                    if (unique && sts.hasNext())
//                        result = null;
//                    return result;
//                } finally {
//                    sts.close();
//                }
//            }
//        });
//    }
    
    public static void moveIncomingRelations(RepositoryConnection conn, Resource fromObject, Resource toObject) throws RepositoryException {
        RepositoryResult<Statement> sts = conn.getStatements(null, null, fromObject, false);
        try {
            while (sts.hasNext()) {
                Statement st = sts.next();
                conn.remove(st);
                conn.add(st.getSubject(), st.getPredicate(), toObject, st.getContext());
            }
        } finally {
            sts.close();
        }
    }

    public static void moveOutgoingRelations(RepositoryConnection conn, Resource fromSubject, Resource toSubject) throws RepositoryException {
        RepositoryResult<Statement> sts = conn.getStatements(fromSubject, null, null, false);
        try {
            while (sts.hasNext()) {
                Statement st = sts.next();
                conn.remove(st);
                conn.add(toSubject, st.getPredicate(), st.getObject(), st.getContext());
            }
        } finally {
            sts.close();
        }
    }

    public static XMLGregorianCalendar now() {
        return DATATYPE_FACTORY.newXMLGregorianCalendar(new GregorianCalendar());
    }

    public static Duration newDuration(boolean isPositive, int years, int months, int days, int hours, int minutes, int seconds) {
        return DATATYPE_FACTORY.newDuration(isPositive, years, months, days, hours, minutes, seconds);
    }

    public static XMLGregorianCalendar asXmlGregorian(Date dt) {
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(dt);
        return DATATYPE_FACTORY.newXMLGregorianCalendar(cal);
    }

    public static XMLGregorianCalendar newTime(int hours, int minutes, int seconds, int millis) {
        return DATATYPE_FACTORY.newXMLGregorianCalendarTime(hours, minutes, seconds, DatatypeConstants.FIELD_UNDEFINED);
    }

    public static XMLGregorianCalendar newDate(int year, int month, int day) {
        return DATATYPE_FACTORY.newXMLGregorianCalendarDate(year, month, day, DatatypeConstants.FIELD_UNDEFINED);
    }

    public static XMLGregorianCalendar newDateTime(int year, int month, int day, int hours, int minutes, int seconds) {
        return newDateTime(year, month, day, hours, minutes, seconds, null);
    }

    public static XMLGregorianCalendar newDateTime(int year, int month, int day, int hours, int minutes, int seconds, String tz) {
        GregorianCalendar cal = (GregorianCalendar)Calendar.getInstance();
        cal.set(year, month - 1, day, hours, minutes, seconds);
        cal.set(GregorianCalendar.MILLISECOND, 0);
        if (tz != null)
            cal.setTimeZone(TimeZone.getTimeZone(tz));
        return DATATYPE_FACTORY.newXMLGregorianCalendar(cal);
    }

    private static DatatypeFactory newDatatypeFactory() {
        try {
            return DatatypeFactory.newInstance();
        } catch (DatatypeConfigurationException e) {
            throw new IllegalStateException(e);
        }
    }

    public static String format(Resource resource) {
        if (resource instanceof URI)
            return "<" + resource.stringValue() + ">";
        return "_:" + resource.stringValue();
    }

    public static <S extends Statement, T extends OpenRDFException> void debugLog(Logger log, CloseableIteration<S, T> statements) throws T {
        try {
            while (statements.hasNext()) {
                Statement st = statements.next();
                log.debug(st.getSubject() + " . " + st.getPredicate() + " . " + st.getObject());
            }
        } finally {
            statements.close();
        }
    }

    public static <T extends Exception> int count(CloseableIteration<?, T> statements) throws T {
        int result = 0;
        try {
            while (statements.hasNext()) {
                ++result;
                statements.next();
            }
        } finally {
            statements.close();
        }
        return result;
    }
}
