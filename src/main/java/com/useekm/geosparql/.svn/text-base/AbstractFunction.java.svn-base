/*
 * Copyright 2011 by TalkingTrends (Amsterdam, The Netherlands)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://opensahara.com/licenses/apache-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package com.useekm.geosparql;

import org.openrdf.model.Literal;
import org.openrdf.model.Value;
import org.openrdf.query.algebra.evaluation.ValueExprEvaluationException;
import org.openrdf.query.algebra.evaluation.function.Function;

import com.useekm.indexing.postgis.PostgisIndexerSettings;
import com.useekm.types.AbstractGeo;
import com.vividsolutions.jts.geom.Geometry;

public abstract class AbstractFunction implements Function {
    protected abstract String getName();

    @Override public String getURI() {
        return PostgisIndexerSettings.EXTENSION_NS + getName();
    }

    protected Geometry asGeometry(Value value) throws ValueExprEvaluationException {
        if (!(value instanceof Literal))
            throw new ValueExprEvaluationException("distance functions expects geometry arguments, found " + value.toString());
        return AbstractGeo.asGeometry((Literal)value, true);
    }

    protected double asDouble(Value value) throws ValueExprEvaluationException {
        if (!(value instanceof Literal))
            throw new ValueExprEvaluationException("distance functions expects xsd:double arguments, found " + value.toString());
        try {
            return ((Literal)value).doubleValue();
        } catch (NumberFormatException e) {
            throw new ValueExprEvaluationException(e);
        }
    }
}