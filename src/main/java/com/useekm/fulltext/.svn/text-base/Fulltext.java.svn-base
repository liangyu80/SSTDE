/*
 * Copyright 2011 by TalkingTrends (Amsterdam, The Netherlands)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://opensahara.com/licenses/apache-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package com.useekm.fulltext;

import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeNodeStream;
import org.apache.commons.lang.Validate;

import com.useekm.fulltext.antlr3.QueryGenerator;
import com.useekm.fulltext.antlr3.TextSearchLexer;
import com.useekm.fulltext.antlr3.TextSearchParser;

/**
 * Utility class for parsing full text search queries.
 */
public class Fulltext {
    /**
     * Parses the provided query. Recognizes words separated by whitespace or binary operators.
     * The allowed binary operators are: & and |.
     * 
     * @return A {@link FulltextSearch} abstract syntax tree that resembles the provided query.
     * 
     * @param query The query to parse
     * @throws FulltextParseException When the query is invalid
     */
    public static FulltextSearch parse(String query) {
        TextSearchParser parser = new TextSearchParser(getTokenStream(query));
        try {
            CommonTree tree = (CommonTree)parser.searches().getTree();
            CommonTreeNodeStream nodes = new CommonTreeNodeStream(tree);
            QueryGenerator generator = new QueryGenerator(nodes);
            return generator.query();
        } catch (RecognitionException e) {
            throw new FulltextParseException(e, query);
        } catch (FulltextParseException e) {
            throw new FulltextParseException(e, query);
        }
    }

    /**
     * Returns the provided query in a canonical form. Useful for testing.
     */
    public static String canonical(FulltextSearch query) {
        Validate.notNull(query);
        if (query instanceof And) {
            return "(" + canonical(((And)query).getLhs()) + " & " + canonical(((And)query).getRhs()) + ")";
        } else if (query instanceof Or) {
            return "(" + canonical(((Or)query).getLhs()) + " | " + canonical(((Or)query).getRhs()) + ")";
        } else if (query instanceof Prefix) {
            return canonical(((Prefix)query).getArg()) + '*';
        }
        return ((Word)query).getWord();
    }

    private static CommonTokenStream getTokenStream(String input) {
        TextSearchLexer lexer = new TextSearchLexer(new ANTLRStringStream(input));
        return new CommonTokenStream(lexer);
    }
}