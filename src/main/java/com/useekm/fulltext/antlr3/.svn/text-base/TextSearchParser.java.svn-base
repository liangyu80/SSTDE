// $ANTLR 3.2 Sep 23, 2009 14:05:07 com\\useekm\\fulltext\\antlr3\\TextSearch.g 2011-11-20 04:25:08
// Copyright 2011 by TalkingTrends (Amsterdam, The Netherlands)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://opensahara.com/licenses/apache-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and limitations under
// the License.
//CHECKSTYLE:ANTLR
    package com.useekm.fulltext.antlr3;
    import com.useekm.fulltext.FulltextParseException;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.tree.*;

public class TextSearchParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANDX", "OR", "LOOKUP", "PREFIXLOOKUP", "OPEN", "CLOSE", "WORD", "PREFIXWORD", "LETTER", "WS"
    };
    public static final int WORD=11;
    public static final int OPEN=9;
    public static final int LOOKUP=7;
    public static final int WS=14;
    public static final int CLOSE=10;
    public static final int LETTER=13;
    public static final int OR=6;
    public static final int PREFIXWORD=12;
    public static final int AND=4;
    public static final int EOF=-1;
    public static final int PREFIXLOOKUP=8;
    public static final int ANDX=5;

    // delegates
    // delegators


        public TextSearchParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public TextSearchParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return TextSearchParser.tokenNames; }
    public String getGrammarFileName() { return "com\\useekm\\fulltext\\antlr3\\TextSearch.g"; }


        public void reportError(RecognitionException e) {
            throw new FulltextParseException();
        }
        public static void suppresCompileWarnings() {
        	Stack<String> stack = new Stack<String>(); stack.empty();
    		List<String> list = new ArrayList<String>(); list.size();
    		ArrayList<String> arrayList = new ArrayList<String>(); arrayList.size();
        }


    public static class searches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searches"
    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:62:1: searches : expr EOF ;
    public final TextSearchParser.searches_return searches() throws RecognitionException {
        TextSearchParser.searches_return retval = new TextSearchParser.searches_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF2=null;
        TextSearchParser.expr_return expr1 = null;


        Object EOF2_tree=null;

        try {
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:62:9: ( expr EOF )
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:62:11: expr EOF
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_in_searches148);
            expr1=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_searches150); 

            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "searches"

    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:64:1: expr : (e1= exprPart -> $e1) ( ( ( AND )? e2= exprPart -> ^( ANDX $expr $e2) )+ | ( OR e4= exprPart -> ^( OR $expr $e4) )+ | ( () -> $e1) ) ;
    public final TextSearchParser.expr_return expr() throws RecognitionException {
        TextSearchParser.expr_return retval = new TextSearchParser.expr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AND3=null;
        Token OR4=null;
        TextSearchParser.exprPart_return e1 = null;

        TextSearchParser.exprPart_return e2 = null;

        TextSearchParser.exprPart_return e4 = null;


        Object AND3_tree=null;
        Object OR4_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleSubtreeStream stream_exprPart=new RewriteRuleSubtreeStream(adaptor,"rule exprPart");
        try {
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:65:3: ( (e1= exprPart -> $e1) ( ( ( AND )? e2= exprPart -> ^( ANDX $expr $e2) )+ | ( OR e4= exprPart -> ^( OR $expr $e4) )+ | ( () -> $e1) ) )
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:65:5: (e1= exprPart -> $e1) ( ( ( AND )? e2= exprPart -> ^( ANDX $expr $e2) )+ | ( OR e4= exprPart -> ^( OR $expr $e4) )+ | ( () -> $e1) )
            {
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:65:5: (e1= exprPart -> $e1)
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:65:6: e1= exprPart
            {
            pushFollow(FOLLOW_exprPart_in_expr164);
            e1=exprPart();

            state._fsp--;

            stream_exprPart.add(e1.getTree());


            // AST REWRITE
            // elements: e1
            // token labels: 
            // rule labels: retval, e1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 65:17: -> $e1
            {
                adaptor.addChild(root_0, stream_e1.nextTree());

            }

            retval.tree = root_0;
            }

            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:65:24: ( ( ( AND )? e2= exprPart -> ^( ANDX $expr $e2) )+ | ( OR e4= exprPart -> ^( OR $expr $e4) )+ | ( () -> $e1) )
            int alt4=3;
            switch ( input.LA(1) ) {
            case AND:
            case OPEN:
            case WORD:
            case PREFIXWORD:
                {
                alt4=1;
                }
                break;
            case OR:
                {
                alt4=2;
                }
                break;
            case EOF:
            case CLOSE:
                {
                alt4=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:66:7: ( ( AND )? e2= exprPart -> ^( ANDX $expr $e2) )+
                    {
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:66:7: ( ( AND )? e2= exprPart -> ^( ANDX $expr $e2) )+
                    int cnt2=0;
                    loop2:
                    do {
                        int alt2=2;
                        switch ( input.LA(1) ) {
                        case AND:
                        case OPEN:
                        case WORD:
                        case PREFIXWORD:
                            {
                            alt2=1;
                            }
                            break;

                        }

                        switch (alt2) {
                    	case 1 :
                    	    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:66:8: ( AND )? e2= exprPart
                    	    {
                    	    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:66:8: ( AND )?
                    	    int alt1=2;
                    	    switch ( input.LA(1) ) {
                    	        case AND:
                    	            {
                    	            alt1=1;
                    	            }
                    	            break;
                    	    }

                    	    switch (alt1) {
                    	        case 1 :
                    	            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:66:8: AND
                    	            {
                    	            AND3=(Token)match(input,AND,FOLLOW_AND_in_expr179);  
                    	            stream_AND.add(AND3);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_exprPart_in_expr184);
                    	    e2=exprPart();

                    	    state._fsp--;

                    	    stream_exprPart.add(e2.getTree());


                    	    // AST REWRITE
                    	    // elements: expr, e2
                    	    // token labels: 
                    	    // rule labels: retval, e2
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    	    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 66:25: -> ^( ANDX $expr $e2)
                    	    {
                    	        // com\\useekm\\fulltext\\antlr3\\TextSearch.g:66:28: ^( ANDX $expr $e2)
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANDX, "ANDX"), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_e2.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt2 >= 1 ) break loop2;
                                EarlyExitException eee =
                                    new EarlyExitException(2, input);
                                throw eee;
                        }
                        cnt2++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:67:7: ( OR e4= exprPart -> ^( OR $expr $e4) )+
                    {
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:67:7: ( OR e4= exprPart -> ^( OR $expr $e4) )+
                    int cnt3=0;
                    loop3:
                    do {
                        int alt3=2;
                        switch ( input.LA(1) ) {
                        case OR:
                            {
                            alt3=1;
                            }
                            break;

                        }

                        switch (alt3) {
                    	case 1 :
                    	    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:67:8: OR e4= exprPart
                    	    {
                    	    OR4=(Token)match(input,OR,FOLLOW_OR_in_expr207);  
                    	    stream_OR.add(OR4);

                    	    pushFollow(FOLLOW_exprPart_in_expr211);
                    	    e4=exprPart();

                    	    state._fsp--;

                    	    stream_exprPart.add(e4.getTree());


                    	    // AST REWRITE
                    	    // elements: expr, e4, OR
                    	    // token labels: 
                    	    // rule labels: e4, retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 67:25: -> ^( OR $expr $e4)
                    	    {
                    	        // com\\useekm\\fulltext\\antlr3\\TextSearch.g:67:28: ^( OR $expr $e4)
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot(stream_OR.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_e4.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt3 >= 1 ) break loop3;
                                EarlyExitException eee =
                                    new EarlyExitException(3, input);
                                throw eee;
                        }
                        cnt3++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:68:7: ( () -> $e1)
                    {
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:68:7: ( () -> $e1)
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:68:8: ()
                    {
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:68:8: ()
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:68:9: 
                    {
                    }



                    // AST REWRITE
                    // elements: e1
                    // token labels: 
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 68:25: -> $e1
                    {
                        adaptor.addChild(root_0, stream_e1.nextTree());

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class exprPart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exprPart"
    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:79:1: exprPart : ( OPEN expr CLOSE | lookup );
    public final TextSearchParser.exprPart_return exprPart() throws RecognitionException {
        TextSearchParser.exprPart_return retval = new TextSearchParser.exprPart_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OPEN5=null;
        Token CLOSE7=null;
        TextSearchParser.expr_return expr6 = null;

        TextSearchParser.lookup_return lookup8 = null;


        Object OPEN5_tree=null;
        Object CLOSE7_tree=null;

        try {
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:80:3: ( OPEN expr CLOSE | lookup )
            int alt5=2;
            switch ( input.LA(1) ) {
            case OPEN:
                {
                alt5=1;
                }
                break;
            case WORD:
            case PREFIXWORD:
                {
                alt5=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }

            switch (alt5) {
                case 1 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:80:5: OPEN expr CLOSE
                    {
                    root_0 = (Object)adaptor.nil();

                    OPEN5=(Token)match(input,OPEN,FOLLOW_OPEN_in_exprPart284); 
                    pushFollow(FOLLOW_expr_in_exprPart287);
                    expr6=expr();

                    state._fsp--;

                    adaptor.addChild(root_0, expr6.getTree());
                    CLOSE7=(Token)match(input,CLOSE,FOLLOW_CLOSE_in_exprPart289); 

                    }
                    break;
                case 2 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:81:5: lookup
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lookup_in_exprPart296);
                    lookup8=lookup();

                    state._fsp--;

                    adaptor.addChild(root_0, lookup8.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exprPart"

    public static class lookup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lookup"
    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:82:1: lookup : ( WORD -> ^( LOOKUP WORD ) | PREFIXWORD -> ^( PREFIXLOOKUP PREFIXWORD ) );
    public final TextSearchParser.lookup_return lookup() throws RecognitionException {
        TextSearchParser.lookup_return retval = new TextSearchParser.lookup_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WORD9=null;
        Token PREFIXWORD10=null;

        Object WORD9_tree=null;
        Object PREFIXWORD10_tree=null;
        RewriteRuleTokenStream stream_WORD=new RewriteRuleTokenStream(adaptor,"token WORD");
        RewriteRuleTokenStream stream_PREFIXWORD=new RewriteRuleTokenStream(adaptor,"token PREFIXWORD");

        try {
            // com\\useekm\\fulltext\\antlr3\\TextSearch.g:83:3: ( WORD -> ^( LOOKUP WORD ) | PREFIXWORD -> ^( PREFIXLOOKUP PREFIXWORD ) )
            int alt6=2;
            switch ( input.LA(1) ) {
            case WORD:
                {
                alt6=1;
                }
                break;
            case PREFIXWORD:
                {
                alt6=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:83:5: WORD
                    {
                    WORD9=(Token)match(input,WORD,FOLLOW_WORD_in_lookup305);  
                    stream_WORD.add(WORD9);



                    // AST REWRITE
                    // elements: WORD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 83:10: -> ^( LOOKUP WORD )
                    {
                        // com\\useekm\\fulltext\\antlr3\\TextSearch.g:83:13: ^( LOOKUP WORD )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOOKUP, "LOOKUP"), root_1);

                        adaptor.addChild(root_1, stream_WORD.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    // com\\useekm\\fulltext\\antlr3\\TextSearch.g:84:5: PREFIXWORD
                    {
                    PREFIXWORD10=(Token)match(input,PREFIXWORD,FOLLOW_PREFIXWORD_in_lookup319);  
                    stream_PREFIXWORD.add(PREFIXWORD10);



                    // AST REWRITE
                    // elements: PREFIXWORD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 84:16: -> ^( PREFIXLOOKUP PREFIXWORD )
                    {
                        // com\\useekm\\fulltext\\antlr3\\TextSearch.g:84:19: ^( PREFIXLOOKUP PREFIXWORD )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREFIXLOOKUP, "PREFIXLOOKUP"), root_1);

                        adaptor.addChild(root_1, stream_PREFIXWORD.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lookup"

    // Delegated rules


 

    public static final BitSet FOLLOW_expr_in_searches148 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_searches150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprPart_in_expr164 = new BitSet(new long[]{0x0000000000001A52L});
    public static final BitSet FOLLOW_AND_in_expr179 = new BitSet(new long[]{0x0000000000001A10L});
    public static final BitSet FOLLOW_exprPart_in_expr184 = new BitSet(new long[]{0x0000000000001A12L});
    public static final BitSet FOLLOW_OR_in_expr207 = new BitSet(new long[]{0x0000000000001A10L});
    public static final BitSet FOLLOW_exprPart_in_expr211 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_OPEN_in_exprPart284 = new BitSet(new long[]{0x0000000000001A10L});
    public static final BitSet FOLLOW_expr_in_exprPart287 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_CLOSE_in_exprPart289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lookup_in_exprPart296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WORD_in_lookup305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREFIXWORD_in_lookup319 = new BitSet(new long[]{0x0000000000000002L});

}