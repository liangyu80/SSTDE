/*
 * Copyright 2012 by TalkingTrends (Amsterdam, The Netherlands)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://opensahara.com/licenses/apache-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package edu.ncsa.uiuc.rdfrepo.testing;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.openrdf.model.Statement;
import org.openrdf.repository.Repository;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.rio.RDFFormat;
import org.openrdf.rio.RDFHandler;
import org.openrdf.rio.RDFHandlerException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.sail.SailException;
import org.openrdf.sail.rdbms.mysql.MySqlStore;
import org.openrdf.sail.rdbms.postgresql.PgSqlStore;

import com.useekm.indexing.IndexingSail;

public class GenericLoader {
    public static void main(String[] args) throws SailException, RDFParseException, RepositoryException, FileNotFoundException, IOException, RDFHandlerException {
        String dir = "C:\\work\\programming\\OData\\LinkedData\\xml\\rdf_wkt\\all";
        GenericLoader loader = new GenericLoader();
        SailRepository repository = loader.getPgSQLRepo();
        //        repository.getConnection().clear();
        loader.loadData(repository, new File(dir), RDFFormat.RDFXML);
        //        RepositoryConnection connection = repository.getConnection();
        //        connection.clear();
        //        connection.commit();
        //        connection.close();
        //        repository.shutDown();
        repository.shutDown();
    }

    public void loadData(Repository repository, File file, RDFFormat format) throws RDFParseException, RepositoryException, FileNotFoundException, IOException,
        RDFHandlerException, SailException {
        if (file.isDirectory()) {
            for (File subFile: file.listFiles()) {
                loadData(repository, subFile, format);
            }
        } else {
            //            repository.getConnection().setAutoCommit(true);
            //            RepositoryConnection connection = repository.getConnection();
            //            repository.getConnection().add(new FileInputStream(file), "", format);
            RepositoryConnection connection = repository.getConnection();
            //            repository.getConnection().setAutoCommit(false);
            loadFile(connection, file, format);
            connection.commit();
            connection.close();
            System.out.println("File " + file.getName() + " has been loaded!");
        }
    }

    public void loadFile(RepositoryConnection connection, File file, RDFFormat format) throws RDFParseException, RDFHandlerException, FileNotFoundException, IOException,
        RepositoryException {
        //        RDFXMLParser parser = new RDFXMLParser();
        //        parser.setRDFHandler(new TripleHandle(connection));
        //        parser.parse(new FileInputStream(file), "");
        connection.add(file, "", RDFFormat.RDFXML);
        connection.commit();
    }

    public static class TripleHandle implements RDFHandler {
        private RepositoryConnection connection = null;
        private static long count = 0;

        public TripleHandle(RepositoryConnection connection) {
            this.connection = connection;
        }

        @Override public void endRDF() throws RDFHandlerException {
            // TODO Auto-generated method stub

        }

        @Override public void handleComment(String arg0) throws RDFHandlerException {
            // TODO Auto-generated method stub

        }

        @Override public void handleNamespace(String arg0, String arg1) throws RDFHandlerException {
            // TODO Auto-generated method stub

        }

        @Override public void handleStatement(Statement stat) throws RDFHandlerException {

            try {
                connection.add(stat);
                count++;
            } catch (RepositoryException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
                //                connection.addStatement(stat.getSubject(), stat.getPredicate(), stat.getObject());

                //                System.out.println("" + count++ + ",   " + stat);


        }

        @Override public void startRDF() throws RDFHandlerException {
            // TODO Auto-generated method stub

        }

    }

    public SailRepository getMySQLRepo() throws SailException {
        MySqlStore mySqlStore = new MySqlStore("sesame");
        mySqlStore.setUser("root");
        mySqlStore.setPassword("zsmpM942");
        mySqlStore.setServerName("localhost");
        mySqlStore.shutDown();
        mySqlStore.initialize();

        return new SailRepository(mySqlStore);
    }

    public SailRepository getPgSQLRepo() throws SailException {
        PgSqlStore store = new PgSqlStore("sesame");
        store.setUser("postgres");
        store.setPassword("zsmpM942");
        store.setServerName("localhost");
        store.initialize();
        return new SailRepository(store);
    }

    public SailRepository getPgSQLIndexRepo() throws SailException {
        PgSqlStore store = new PgSqlStore("sesame");
        store.setUser("postgres");
        store.setPassword("zsmpM942");
        store.setServerName("localhost");
        store.initialize();
        IndexingSail sail = USeekMSailFac.getIndexingSail("jdbc:postgresql://localhost:5432/useekm_pg", "postgres", "zsmpM942", null, store);
        return new SailRepository(sail);
    }
}
